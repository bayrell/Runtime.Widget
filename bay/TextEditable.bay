<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.TextEditable">


<style>
.widget_text_editable{
	width: 100%;
	max-width: 100%;
	font-family: monospace;
	font-size: var(--widget-font-size);
	padding: var(--widget-button-padding-y) var(--widget-button-padding-x); margin: 0;
	background-color: var(--widget-color-default);
	border-width: var(--widget-border-width);
	border-color: var(--widget-color-border);
	border-style: solid;
	border-radius: 4px;
	box-shadow: none;
	outline: transparent;
	overflow: auto;
	line-height: 1.5;
}
</style>


<template>
	%set Map props = this.getProps();
	<pre class="widget_text_editable"
		class={{ this.class }}
		name={{ this.name }}
		contenteditable="true"
		@event:input={{ this.onKeyDown }}
		@ref="text"
		...props
	></pre>
</template>


<script>

props string name = "";
props bool readonly = false;
props string value = "";
var change_timer = null;


/**
 * Returns textarea props
 */
Map getProps()
{
	if (this.readonly) return {
		"readonly": true,
	};
	return {};
}


/**
 * Mounted event
 */
void onMounted()
{
	var text = this.getRef("text");
	text.innerText = this.value;
}


/**
 * Updated event
 */
void onUpdated()
{
	var text = this.getRef("text");
	if (text.innerText != this.value)
	{
		text.innerText = this.value;
	}
}


/**
 * Key down event
 */
void onKeyDown(var e)
{
	if (this.change_timer != null)
	{
		window.clearTimeout(this.change_timer);
		this.change_timer = null;
	}
	this.change_timer = window.setTimeout(void ()
	{
		this.onChange();
	}, 300);
}


/**
 * Change event
 */
void onChange(var e)
{
	var text = this.getRef("text");
	string value = text.innerText;
	
	/* Send value change */
	if (this.model) this.model.onValueChange(value, this.data);
	this.emit("valueChange", value, this.data);
}


</script>

</class>