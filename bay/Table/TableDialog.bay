<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.Table.TableDialog" extends="Runtime.Widget.Table.Table">

<use name="Runtime.ModelProxy" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Widget.Button" component="true" />
<use name="Runtime.Widget.Dialog.Dialog" component="true" />
<use name="Runtime.Widget.Dialog.DialogEvent" />
<use name="Runtime.Widget.Form.Form" component="true" />


<template name="renderTop">
	<div class="web_table__top">
		<Button type="success middle" @event:MouseClickEvent="onAddClick">[+] Add</Button>
	</div>
</template>


<template name="renderField" args="int row_number, FieldComponent field, Dict item">
    
    %if (field.name == "row_buttons")
	{
		%set string href_edit = model.get_href.call(["edit", {"item": item}]);
		%set string href_delete = model.get_href.call(["delete", {"item": item}]);
		
		<div class="web_table__td_row_buttons">
			<Button type="small"
    			@event:MouseClickEvent="onEditClick" data-id={{ item.id }}>Edit</Button>
    		<Button type="danger small"
    			@event:MouseClickEvent="onDeleteClick" data-id={{ item.id }}>Delete</Button>
		</div>
	}
    %else
    {
        %render parent::renderField(row_number, field, item);
    }
    
</template>


<template name="renderSaveDialogContent">
	<Form @model=["widgets", "form"]
		show_buttons="false"
		show_result="false"
	/>
</template>


<template name="renderDeleteDialogContent">
</template>


<template name="renderSaveDialog">
	%if (model.save_dialog != null)
	{
		<Dialog @ref="save_dialog" @model="save_dialog" @event:DialogEvent="onSaveDialogEvent">
			%render static::renderSaveDialogContent();
		</Dialog>
	}
</template>


<template name="renderDeleteDialog">
	%if (model.delete_dialog != null)
	{
		<Dialog @ref="delete_dialog" @model="delete_dialog" @event:DialogEvent="onDeleteDialogEvent">
			%render static::renderDeleteDialogContent();
		</Dialog>
	}
</template>


<template name="renderDialogs">
	%render static::renderSaveDialog();
	%render static::renderDeleteDialog();
</template>


<template>
	%render static::renderTop();
	%render static::renderTable();
	%render static::renderDialogs();
</template>


<script>


/**
 * Add click
 */
async void onAddClick(Message<MouseClickEvent> msg)
{
	ModelProxy form = this.proxy(["widgets", "form"]);
	ModelProxy page_model = this.proxy();
	ModelProxy save_dialog = this.proxy("save_dialog");
	
	form.commit("setPrimaryKey", null);
	form.commit("clearItem");
	
	save_dialog.commit("setTitle", "Add item");
	save_dialog.commit("show");
}


/**
 * Edit click
 */
async void onEditClick(Message<MouseClickEvent> msg)
{
	ModelProxy form = this.proxy(["widgets", "form"]);
	ModelProxy save_dialog = this.proxy("save_dialog");
	ModelProxy page_model = this.proxy();
	
	/*form.commit("setLoading");*/
	form.commit("setPrimaryKey", this.getDialogPrimaryKey(msg));
	save_dialog.commit("setTitle", "Edit item");
	save_dialog.commit("show");
	
	page_model.commit("clearItem");
	page_model.commit("setAction", "edit");
	await page_model.commitAsync("callCrudItem");
}


/**
 * Delete click
 */
async void onDeleteClick(Message<MouseClickEvent> msg)
{
	ModelProxy form = this.proxy(["widgets", "form"]);
	ModelProxy delete_dialog = this.proxy("delete_dialog");
	ModelProxy page_model = this.proxy();
	
	/*form.commit("setLoading");*/
	form.commit("setItem", null);
	form.commit("setPrimaryKey", this.getDialogPrimaryKey(msg));
	delete_dialog.commit("setTitle", "Delete item");
	delete_dialog.commit("show");
	
	page_model.commit("clearItem");
	page_model.commit("setAction", "delete");
	await page_model.commitAsync("callCrudItem");
}


/**
 * Save dialog event
 */
async void onSaveDialogEvent(Message<DialogEvent> msg)
{
	ModelProxy save_dialog = this.proxy("save_dialog");
	
	if (msg.event.button_result == "cancel")
	{
		save_dialog.commit("hide");
		return;
	}
	
	/* Save item */
	if (msg.event.button_result == "ok")
	{
		ModelProxy model = this.proxy();
		save_dialog.commit("setWaitMessage");
		await model.commitAsync("callCrudSave");
		
		/* Check if success */
		if (save_dialog.call("isSuccess"))
		{
			save_dialog.commit("hide");
			await model.commitAsync("callCrudSearch");
		}
		
		return;
	}
}


/**
 * Delete dialog event
 */
async void onDeleteDialogEvent(Message<DialogEvent> msg)
{
	ModelProxy delete_dialog = this.proxy("delete_dialog");
	
	if (msg.event.button_result == "cancel")
	{
		delete_dialog.commit("hide");
		return;
	}
	
	/* Delete item */
	if (msg.event.button_result == "ok")
	{
		ModelProxy model = this.proxy();
		delete_dialog.commit("setWaitMessage");
		await model.commitAsync("callCrudDelete");
		
		/* Check if success */
		if (delete_dialog.call("isSuccess"))
		{
			delete_dialog.commit("hide");
			await model.commitAsync("callCrudSearch");
		}
		
		return;
	}
}

</script>


</class>