<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.Table.TableDialog" extends="Runtime.Widget.Table.Table">

<use name="Runtime.BaseModel" />
<use name="Runtime.Callback" />
<use name="Runtime.ModelProxy" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Widget.Button" component="true" />
<use name="Runtime.Widget.Crud.CrudWidget" />
<use name="Runtime.Widget.Dialog.Dialog" component="true" />
<use name="Runtime.Widget.Dialog.DialogEvent" />
<use name="Runtime.Widget.Form.Form" component="true" />
<use name="Runtime.Widget.Form.FormModel" />


<style>
.table_dialog__delete_content{
	text-align: center;
	padding: 1em 0;
}
</style>


<template name="renderTop">
	%if (model.show_table_top)
	{
		<div class="web_table__top">
			<Button type="success middle" @event:MouseClickEvent="onAddClick">[+] Add</Button>
		</div>
	}
</template>


<template name="renderField" args="int row_number, FieldInfo field, Dict item">
	
	%if (field.component != null or field.render_method or field.value_method)
	{
		%render parent::renderField(row_number, field, item);
	}
	%elseif (field.name == "row_buttons")
	{
		<div class="web_table__td_row_buttons">
			<Button type="small"
				@event:MouseClickEvent="onEditClick"
				data-item={{ item }} data-pos={{ row_number }}>Edit</Button>
			<Button type="danger small"
				@event:MouseClickEvent="onDeleteClick"
				data-item={{ item }} data-pos={{ row_number }}>Delete</Button>
		</div>
	}
	%else
	{
		%render parent::renderField(row_number, field, item);
	}
	
</template>


<template name="renderSaveDialogContent">
	%set FormModel form = model.getParentWidget(layout).getWidget("form");
	%if (form.action == "add" or form.action == "edit")
	{
		%set string component_name = form.component_name;
		<{component_name}
			@global={{ layout.getWidgetGlobalPath(form.widget_path) }}
			@ref="form"
			show_buttons="false"
			show_result="false"
		/>
	}
</template>


<template name="renderDeleteDialogContent">
	%set CrudWidget parent_model = model.getParentWidget(layout);
	%set FormModel form = model.getParentWidget(layout).getWidget("form");
	%if (form.action == "delete")
	{
		<div class="table_dialog__delete_content">
		%if (form.data.item == null)
		{
			{{ "Loading..." }}
		}
		%else
		{
			{{ parent_model.getPageTitle("delete_content") }}
		}
		</div>
	}
</template>


<template name="renderSaveDialog">
	%if (model.save_dialog != null)
	{
		<Dialog @ref="save_dialog" @model="save_dialog" @event:DialogEvent="onSaveDialogEvent">
			%render static::renderSaveDialogContent();
		</Dialog>
	}
</template>


<template name="renderDeleteDialog">
	%if (model.delete_dialog != null)
	{
		<Dialog @ref="delete_dialog" @model="delete_dialog" @event:DialogEvent="onDeleteDialogEvent">
			%render static::renderDeleteDialogContent();
		</Dialog>
	}
</template>


<template name="renderDialogs">
	%render static::renderSaveDialog();
	%render static::renderDeleteDialog();
</template>


<template>
	%render static::renderTop();
	%render static::renderTable();
	%render static::renderDialogs();
</template>


<script>

var form;


/**
 * Returns true if component is changed and need to repaint
 */
bool isChanged(var model, Dict params, var content)
{
	if (this.form and this.form.isChanged(this.form.params, this.form.content))
	{
		return true;
	}
	return parent::isChanged(model, params, content);
}


/**
 * Add click
 */
async void onAddClick(Message<MouseClickEvent> msg)
{
	ModelProxy parent_model = this.proxyParentWidget();
	ModelProxy form = parent_model.proxy(["widgets", "form"]);
	ModelProxy page_model = this.proxy();
	ModelProxy save_dialog = this.proxy("save_dialog");
	
	form.commit("setAction", "add");
	form.commit("setDictionaryLoad", true);
	form.proxy("data").commit("setPrimaryKey", null);
	form.proxy("data").commit("clearItem");
	form.commit("clearFieldErrors");
	save_dialog.commit("setTitle", "Add item");
	save_dialog.commit("show");
	await form.commitAsync("doLoadDictionary");
}


/**
 * Edit click
 */
async void onEditClick(Message<MouseClickEvent> msg)
{
	ModelProxy parent_model = this.proxyParentWidget();
	ModelProxy form = parent_model.proxy(["widgets", "form"]);
	ModelProxy save_dialog = this.proxy("save_dialog");
	ModelProxy page_model = this.proxy();
	
	int pos = msg.sender.params.get("data-pos");
	Dict item = msg.sender.params.get("data-item");
	Dict item_pk = form.proxy("fields").call("getPrimaryKey", item, pos);
	
	form.commit("setAction", "edit");
	form.proxy("data").commit("setPrimaryKey", item_pk);
	form.proxy("data").commit("clearItem");
	form.commit("clearFieldErrors");
	save_dialog.commit("setTitle", "Edit item");
	save_dialog.commit("show");
	await form.commitAsync("doLoadItem");
}


/**
 * Delete click
 */
async void onDeleteClick(Message<MouseClickEvent> msg)
{
	ModelProxy parent_model = this.proxyParentWidget();
	ModelProxy form = parent_model.proxy(["widgets", "form"]);
	ModelProxy delete_dialog = this.proxy("delete_dialog");
	ModelProxy page_model = this.proxy();
	
	int pos = msg.sender.params.get("data-pos");
	Dict item = msg.sender.params.get("data-item");
	Dict item_pk = form.proxy("fields").call("getPrimaryKey", item, pos);
	
	form.commit("setAction", "delete");
	form.proxy("data").commit("setPrimaryKey", item_pk);
	form.proxy("data").commit("setItem", item);
	delete_dialog.commit("setTitle", "Delete item");
	delete_dialog.commit("show");
}


/**
 * Save dialog event
 */
async void onSaveDialogEvent(Message<DialogEvent> msg)
{
	ModelProxy parent_model = this.proxyParentWidget();
	ModelProxy form = parent_model.proxy(["widgets", "form"]);
	ModelProxy save_dialog = this.proxy("save_dialog");
	ModelProxy page_model = this.proxy();
	
	if (msg.event.button_result == "cancel")
	{
		form.commit("setAction", "");
		save_dialog.commit("hide");
		return;
	}
	
	/* Save item */
	if (msg.event.button_result == "yes")
	{
		save_dialog.commit("setWaitMessage");
		await form.commitAsync("doSave");
		
		/* Check if success */
		if (form.proxy("data").call("isSuccess"))
		{
			save_dialog.commit("hide");
			await page_model.commitAsync("doSearch");
		}
		else
		{
			save_dialog.commit("setMessage", form.data(["data", "error_message"]));
			save_dialog.commit("setErrorCode", form.data(["data", "error_code"]));
		}
		
		return;
	}
}


/**
 * Delete dialog event
 */
async void onDeleteDialogEvent(Message<DialogEvent> msg)
{
	ModelProxy parent_model = this.proxyParentWidget();
	ModelProxy form = parent_model.proxy(["widgets", "form"]);
	ModelProxy delete_dialog = this.proxy("delete_dialog");
	ModelProxy page_model = this.proxy();
	
	if (msg.event.button_result == "cancel")
	{
		form.commit("setAction", "");
		delete_dialog.commit("hide");
		return;
	}
	
	/* Delete item */
	if (msg.event.button_result == "yes")
	{
		delete_dialog.commit("setWaitMessage");
		await form.commitAsync("doDelete");
		
		/* Check if success */
		if (form.proxy("data").call("isSuccess"))
		{
			delete_dialog.commit("hide");
			await page_model.commitAsync("doSearch");
		}
		else
		{
			delete_dialog.commit("setMessage", form.data(["data", "error_message"]));
			delete_dialog.commit("setErrorCode", form.data(["data", "error_code"]));
		}
		
		return;
	}
}

</script>


</class>