/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Table;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseRoute;
use Runtime.Web.BaseModel;
use Runtime.Web.Bus;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Table.Table;
use Runtime.Widget.Table.TopAddButton;
use Runtime.Widget.TopButtonModel;


struct TableModel extends BaseModel
{
	static const string ON_SEARCH_BEFORE = "runtime.widget.table::search_before";
	static const string ON_SEARCH_AFTER = "runtime.widget.table::search_after";
	
	FieldList fields = new FieldList;
	CrudDataStorage data = new CrudDataStorage;
	bool is_loading = false;
	Callback get_names = null;
	Callback get_route_name = null;
	bool show_top_buttons = true;
	string page_name = "page";
	Dict search_data = null;
	string component_name = classof Table;
	string widget_name = "table";
	
	Collection top_buttons = [
		new TopButtonModel{ "name": "add", "component_name": classof TopAddButton },
	];
	
	
	/**
	 * Set get names
	 */
	TableModel setGetNames(Callback value) => this.clone({ "get_names": value });
	
	
	/**
	 * Set get route name
	 */
	TableModel setGetRouteName(Callback value) => this.clone({ "get_route_name": value });
	
	
	/**
	 * Set fields
	 */
	TableModel setFieldsList(FieldList fields) => this.clone{
		"fields": fields,
	};
	
	
	/**
	 * Show table top
	 */
	TableModel setShowTopButtons(bool value) => this.clone({ "show_top_buttons": value });
	
	
	/**
	 * Set search data
	 */
	TableModel setSearchData(Dict search_data) => this.clone({ "search_data": search_data });
	
	
	/**
	 * Set loading
	 */
	TableModel setLoading(bool is_loading) => this.clone({ "is_loading": is_loading });
	
	
	/**
	 * Set data storage
	 */
	TableModel setDataStorage(CrudDataStorage storage)
		=> this.clone({ "data": storage });
	
	
	/**
	 * Add top button
	 */
	TableModel addTopButton(TopButtonModel model) => this.clone({
		"top_buttons": this.top_buttons.pushIm(model)
	});
	
	
	/**
	 * Clear top buttons
	 */
	TableModel clearTopButtons() => this.clone({
		"top_buttons": [],
	});
	
	
	/**
	 * Load widget
	 */
	async static void loadWidget(ModelProxy model, ModelProxy layout)
	{
		await static::doSearch(model);
		await parent::loadWidget(model, layout);
	}
	
	
	/**
	 * Widget event
	 */
	async static Dict event
	(
		ModelProxy<BaseModel> widget,
		string action, Dict obj, var tag = null
	)
	{
		return obj;
	}
	
	
	/**
	 * Set api result
	 */
	static void setApiResult(ModelProxy model, string action, ApiResult res)
	{
	}
	
	
	/**
	 * Load item
	 */
	async static ApiResult doSearch(ModelProxy model)
	{
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		if (not data.call("isReady")) return;
		
		/* Setup loading */
		model.commit("setLoading", true);
		
		/* Get post data */
		Dict search_data = model.data("search_data");
		Dict post_data = data.call("getSearchPostData", search_data);
		
		/* Before event */
		Dict d = await static::callEvent(model, static::ON_SEARCH_BEFORE, {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ApiResult res = await data.callAsync("callApiSearch", d["post_data"]);
		
		/* Set api result */
		data.commit("setApiResult", "search", res);
		model.commit("setApiResult", "search", res);
		
		/* Set loading */
		model.commit("setLoading", false);
		
		/* After event */
		Dict d = await static::callEvent(model, static::ON_SEARCH_AFTER, {
			"api": res,
			"post_data": d["post_data"],
		});
	}
	
}
