/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Table;

use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseRoute;
use Runtime.Web.BaseModel;
use Runtime.Web.Bus;
use Runtime.Widget.FieldInfo;


struct TableModel extends BaseModel
{
	static const string ON_SEARCH_BEFORE = "runtime.widget.table::search_before";
	static const string ON_SEARCH_AFTER = "runtime.widget.table::search_after";
	
	int error_code = 0;
	string api_name = "";
	string error_message = "";
	Dict fields = {};
	Collection fields_list = [];
	Dict dictionary = {};
	bool is_loading = false;
	Callback get_href = null;
	string foreign_key = null;
	var foreign_value = null;
	
	int page = 0;
	int pages = 0;
	int limit = 10;
	Collection<Dict> items = null;
	Dict search_data = null;
	
	
	/**
	 * Set page
	 */
	TableModel setApiName(string api_name) => this.clone({ "api_name": api_name });
	
	
	/**
	 * Set href
	 */
	TableModel setGetHref(string get_href) => this.clone({ "get_href": get_href });
	
	
	/**
	 * Set foreign key
	 */
	TableModel setForeignKey(string foreign_key, var foreign_value) =>
		this.clone({
			"foreign_key": foreign_key,
			"foreign_value": foreign_value,
		});
	
	
	/**
	 * Set dictionary
	 */
	TableModel setDictionary(ApiResult res)
	{
	}
	
	
	/**
	 * Set search data
	 */
	TableModel setSearchData(Dict search_data) => this.clone({ "search_data": search_data });
	
	
	/**
	 * Set page
	 */
	TableModel setPage(int page = 0) => this.clone({ "page": page });
	
	
	/**
	 * Set pages
	 */
	TableModel setPages(int pages = 0) => this.clone({ "pages": pages });
	
	
	/**
	 * Set limit
	 */
	TableModel setLimit(int limit = 10) => this.clone({ "limit": limit });
	
	
	/**
	 * Set loading
	 */
	TableModel setLoading(bool is_loading) => this.clone({ "is_loading": is_loading });
	
	
	/**
	 * Set items
	 */
	TableModel setItems(Collection items) => this.clone({ "items": items });
	
	
	/**
	 * Add field
	 */
	TableModel addField(FieldInfo field)
	{
		Dict fields = this.fields;
		string field_name = field.name;
		fields <= { field_name } <= field;
		return this.clone{
			"fields": fields,
		}
	}
	
	
	/**
	 * Set fields
	 */
	TableModel setFields(Dict fields) => this.clone{
		"fields": fields,
	};
	
	
	/**
	 * Setup field options
	 */
	TableModel setFieldOptions(string field_name, Collection options)
	{
		Dict fields = this.fields;
		fields <= { field_name } <= options <= options;
		return this.clone{
			"fields": fields,
		}
	}
	
	
	/**
	 * Set fields list
	 */
	TableModel setFieldsList(Collection fields_list) => this.clone{
		"fields_list": fields_list,
	};
	
	
	/**
	 * Set wait message
	 */
	TableModel setWaitMessage()
	{
		TableModel model = this;
		
		model <= error_code <= 0;
		model <= error_message <= "Wait please ...";
		
		return model;
	}
	
	
	/**
	 * Clear error message
	 */
	TableModel clearErrorMessage()
	{
		TableModel model = this;
		
		model <= error_code <= 0;
		model <= error_message <= "";
		
		return model;
	}
	
	
	/**
	 * Message
	 */
	TableModel setMessage(string error_message) => this.copy
	{
		"error_message": error_message,
	};
	
	
	/**
	 * Success
	 */
	TableModel setSuccess(string error_message, int error_code = 1) => this.copy
	{
		"error_message": error_message,
		"error_code": error_code,
	};
	
	
	/**
	 * Error
	 */
	TableModel setError(string error_message, int error_code = -1) => this.copy
	{
		"error_message": error_message,
		"error_code": error_code,
	};
	
	
	/**
	 * Returns true if error
	 */
	bool isError() => this.error_code < 0;
	
	
	/**
	 * Returns true if success
	 */
	bool isSuccess() => this.error_code > 0;
	
	
	/**
	 * Set api result
	 */
	static void setApiResult(ModelProxy model, string event, ApiResult res)
	{
		if (res.isSuccess())
		{
			model.commit("setItems", res["data"]["items"]);
			model.commit("setLimit", res["data"]["limit"]);
			model.commit("setPage", res["data"]["page"]);
			model.commit("setPages", res["data"]["pages"]);
		}
		
		model.commit("setError", res.getErrorMessage(), res.getErrorCode());
	}
	
	
	/**
	 * Load widget
	 */
	async static void loadWidgets(ModelProxy model, BaseRoute route)
	{
		await parent::loadWidgets(model, route);
		await static::doSearch(model);
	}
	
	
	/**
	 * Widget event
	 */
	async static Dict event
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		string action, Dict obj
	)
	{
		if (action == static::ON_SEARCH_BEFORE)
		{
			string foreign_key = widget.data('foreign_key');
			if (foreign_key != null)
			{
				obj <= post_data <= { foreign_key } <= widget.data('foreign_value');
			}
		}
		return obj;
	}
	
	
	/**
	 * Load item
	 */
	async static ApiResult doSearch(ModelProxy model)
	{
		if (model.data("api_name") == "") return;
		
		/* Setup loading */
		model.commit("setLoading", true);
		
		/* Get post data */
		int page = model.data("page");
		int limit = model.data("limit");
		Dict search_data = model.data("search_data");
		Dict post_data = {
			"page": page,
			"limit": limit,
		};
		if (search_data != null) post_data = post_data.concat(search_data);
		
		/* Before event */
		Dict d = await static::callEvent(model, static::ON_SEARCH_BEFORE, {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ApiResult res = await static::callApiSearch(model, d["post_data"]);
		
		/* Set api result */
		model.commit("setLoading", false);
		model.commit("setApiResult", "item", res);
		
		/* After event */
		Dict d = await static::callEvent(model, static::ON_SEARCH_AFTER, {
			"api": res,
			"post_data": post_data,
		});
	}
	
	
	/**
	 * Returns search api name
	 */
	string getSearchApiName() => this.api_name ~ "::crud.search";
	
	
	/**
	 * Call api search
	 */
	async static ApiResult callApiSearch(ModelProxy model, Dict post_data)
	{
		return await Bus::callApi(model.call("getSearchApiName"), post_data);
	}
	
}
