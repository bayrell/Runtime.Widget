<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.Input">


<style>
.widget_input, .widget_input:focus{
	width: 100%;
	font-family: var(--widget-font-family);
	font-size: var(--widget-font-size);
	padding: var(--widget-button-padding-y) var(--widget-button-padding-x);
	background-color: var(--widget-color-default);
	border-width: var(--widget-border-width);
	border-color: var(--widget-color-border);
	border-style: solid;
	border-radius: 4px;
	box-shadow: none;
	outline: transparent;
	line-height: normal;
	min-height: 32px;
}
</style>


<template>
	%set Map props = this.getProps();
	<input type={{ this.type }} class="widget_input" name={{ this.name }}
		value={{ this.value }}
		placeholder={{ this.placeholder }}
		@event:change={{ this.onChange }}
		...props
	/>
</template>


<script>

props bool readonly = false;
props string name = "";
props string value = "";
props string placeholder = "";
props string type = "text";


/**
 * Returns input props
 */
Map getProps()
{
	if (this.readonly) return {
		"readonly": true,
	};
	return {};
}


/**
 * Change event
 */
void onChange(var e)
{
	var value = e.target.value;
	
	/* Send value change */
	if (this.model) this.model.onValueChange(value, this.data);
	this.emit("valueChange", value, this.data);
}

</script>


</class>