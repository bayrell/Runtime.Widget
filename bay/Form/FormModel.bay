/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Form;

use Runtime.BaseModel;
use Runtime.Widget.Form.Form;
use Runtime.Widget.Form.FormMessage;
use Runtime.Widget.Form.FormStorageInterface;
use Runtime.Widget.WidgetResultModel;


class FormModel extends BaseModel
{
	string api_name = "";
	string component = classof Form;
	string widget_name = "form";
	
	/* Fields */
	Vector<Map> fields = [];
	Dict<Vector> fields_error = {};
	
	/* Data */
	Dict pk = null;
	Dict data = {};
	FormStorageInterface storage = null;
	RowButtonsModel bottom_buttons;
	
	/* Form result */
	WidgetResultModel load = null;
	WidgetResultModel result = null;
	
	
	/**
	 * Returns api name
	 */
	string getApiName() => "";
	
	
	/**
	 * Create data storage
	 */
	BaseObject createDataStorage() => null;
	
	
	/**
	 * Returns data
	 */
	Dict getPostData() => this.data;
	
	
	/**
	 * Setup widget
	 */
	void setup(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		
		/* Setup params */
		if (params.has("api_name")) this.addFields(params.get("api_name"));
		if (params.has("fields")) this.addFields(params.get("fields"));
		if (params.has("storage")) this.storage = params.get("storage");
		
		/* Setup storage */
		if (this.storage == null)
		{
			this.storage = this.createDataStorage(params);
		}
		
		/* Setup primary key */
		if (params.has("primary_key"))
		{
			this.pk = params.get("primary_key");
		}
	}
	
	
	/**
	 * Init widget
	 */
	void init(Dict params)
	{
		parent(params);
		
		/* Buttons */
		this.bottom_buttons = this.addWidget(
			classof RowButtonsModel,
			{
				"widget_name": "bottom_buttons",
				"styles": ["@widget_form__bottom_buttons"],
			}
		);
	}
	
	
	/**
	 * Add field
	 */
	void addField(Map field)
	{
		this.fields.append(field);
	}
	
	
	/**
	 * Add fields
	 */
	void addFields(Collection fields)
	{
		for (int i=0; i<fields.count(); i++)
		{
			this.addField(fields.get(i));
		}
	}
	
	
	/**
	 * Remove field
	 */
	void removeField(string field_name)
	{
		this.fields = this.fields.filter(
			bool (Map field) use (field_name) => field.get("name") != field_name
		);
	}
	
	
	/**
	 * Returns field result
	 */
	Collection getFieldResult(string field_name)
	{
		if (this.fields_error.has(field_name)) return this.fields_error.get(field_name);
		return [];
	}
	
	
	/**
	 * Clear form
	 */
	void clear()
	{
		this.data = {};
		this.fields_error = {};
		for (int i=0; i<this.fields.count(); i++)
		{
			Dict field = this.fields.get(i);
			string field_name = field.get("name");
			var default_value = field.get("default", "");
			this.data.set(field_name, default_value);
		}
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(string field_name) => this.data.get(field_name);
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "pk", data);
		serializer.process(this, "data", data);
		serializer.process(this, "load", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Set api result
	 */
	void setApiResult(ApiResult res, string action)
	{
		if (res == null) return;
		
		/* Load */
		if (action == "load")
		{
			this.load.setApiResult(res);
		}
		
		/* Submit */
		if (action == "submit")
		{
			if (res.data.has("fields"))
			{
				this.fields_error = res.data.get("fields");
			}
			this.result.setApiResult(res);
		}
	}
	
	
	/**
	 * Merge post data
	 */
	Dict mergePostData(Dict post_data, string action)
	{
		return post_data;
	}
	
	
	/**
	 * Load form data
	 */
	async void loadData(RenderContainer container)
	{
		ApiResult res = await this.storage.load();
		this.setApiResult(res, "load");
		this.emit(new FormMessage{
			"name": "load",
			"result": res,
		});
	}
	
	
	/**
	 * Submit form
	 */
	async void submit()
	{
		this.result.setWaitMessage();
		ApiResult res = await this.storage.submit();
		this.setApiResult(res, "submit");
		this.emit(new FormMessage{
			"name": "submit",
			"result": res,
		});
	}
}