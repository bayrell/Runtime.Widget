/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Form;

use Runtime.lib;
use Runtime.Callback;
use Runtime.ModelProxy;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseRoute;
use Runtime.Web.BaseModel;
use Runtime.Web.Layout;
use Runtime.Widget.FieldInfo;
use Runtime.Widget.FieldList;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Crud.CrudWidget;
use Runtime.Widget.Form.Form;
use Runtime.Widget.Table.TableModel;


struct FormModel extends BaseModel
{
	static const string ON_LOAD_ITEM_BEFORE = "runtime.widget.form::load_item_before";
	static const string ON_LOAD_ITEM_AFTER = "runtime.widget.form::load_item_after";
	static const string ON_LOAD_DICTIONARY_BEFORE = "runtime.widget.form::load_dictionary_before";
	static const string ON_LOAD_DICTIONARY_AFTER = "runtime.widget.form::load_dictionary_after";
	static const string ON_SAVE_BEFORE = "runtime.widget.form::save_before";
	static const string ON_SAVE_AFTER = "runtime.widget.form::save_after";
	static const string ON_DELETE_BEFORE = "runtime.widget.form::delete_after";
	static const string ON_DELETE_AFTER = "runtime.widget.form::delete_after";
	
	string action = "";
	Dict search_data = null;
	Dict field_result = null;
	FieldList fields = new FieldList;
	CrudDataStorage data = new CrudDataStorage;
	bool is_loading = false;
	Callback get_names = null;
	string component_name = classof Form;
	string widget_name = "form";
	bool can_dictionary_load = true;
	
	
	/**
	 * Set action
	 */
	FormModel setAction(string action) => this.clone({ "action": action });
	
	
	/**
	 * Set get names
	 */
	FormModel setGetNames(Callback value) => this.clone({ "get_names": value });
	
	
	/**
	 * Set search data
	 */
	TableModel setSearchData(Dict search_data) => this.clone({ "search_data": search_data });
	
	
	/**
	 * Clear error
	 */
	FormModel clearFieldErrors() => this.clone({ "field_result": null });
	
	
	/**
	 * Set loading
	 */
	FormModel setLoading(bool value) => this.clone({ "is_loading": value });
	
	
	/**
	 * Set dictionary load
	 */
	FormModel setDictionaryLoad(bool value) => this.clone({ "can_dictionary_load": value });
	
	
	/**
	 * Set api result
	 */
	static void setApiResult(ModelProxy model, string event, ApiResult res)
	{
		/* Set validation result */
		if (res.data != null and res.data.has("field_result"))
		{
			model.commit("setFieldResult", res.data["field_result"]);
		}
		else
		{
			model.commit("setFieldResult", null);
		}
		
		return model;
	}
	
	
	/**
	 * Returns form class
	 */
	string getErrorClass()
	{
		if (this.data.error_message == "") return "web_form__result--hide";
		if (this.data.error_code > 0) return "web_form__result--success";
		if (this.data.error_code < 0) return "web_form__result--error";
		return "";
	}
	
	
	/**
	 * Get field result
	 */
	Collection<string> getFieldResult(string field_name)
	{
		if (this.field_result == null) return [];
		if (not this.field_result.has(field_name)) return [];
		return this.field_result[field_name];
	}
	
	
	/**
	 * Set field result
	 */
	FormModel setFieldResult(Dict field_result) => this.clone{
		"field_result": field_result,
	};
	
	
	/**
	 * Add foreign model
	 */
	static async void addForeignModel(
		ModelProxy<FormModel> model, ModelProxy<Layout> layout, Dict params
	)
	{
		if (model.proxy("data").call("isNew")) return;
		
		string widget_name = params["widget_name"];
		string component_name = params["component_name"] |> default string classof CrudWidget;
		string foreign_key = params["foreign_key"] |> default string "id";
		string primary_key = params["primary_key"] |> default string "id";
		
		/* Add widget */
		CrudWidget widget_item = rtl::newInstance(component_name, [{"widget_name": widget_name}]);
		ModelProxy widget = model.call("addWidget", widget_item);
		
		/* Add form */
		ModelProxy widget_form = null;
		Callback form_model = params["form_model"];
		if (form_model != null)
		{
			widget_form = widget.call("addWidget", form_model.call());
		}
		else
		{
			string form_model_name = params["form_model_name"] |> default string classof FormModel;
			widget_form = widget.call("addWidget", rtl::newInstance(form_model_name));
		}
		
		/* Init widget form */
		await widget_form.commitAsync("initWidget", layout);
		
		/* Init form */
		Callback form_model_init = params["form_model_init"];
		if (form_model_init != null)
		{
			await form_model_init.callAsync([widget_form, layout]);
		}
		
		/* Disable dictionary load */
		widget_form.commit("setDictionaryLoad", false);
		
		/* Add table */
		ModelProxy widget_table = null;
		Callback table_model = params["table_model"];
		if (table_model != null)
		{
			widget_table = widget.call("addWidget", table_model.call());
		}
		else
		{
			string table_model_name = params["table_model_name"] |> default string classof TableModel;
			widget_table = widget.call("addWidget", rtl::newInstance(table_model_name));
		}
		
		/* Init widget table */
		await widget_table.commitAsync("initWidget", layout);
		
		/* Init table */
		Callback table_model_init = params["table_model_init"];
		if (table_model_init != null)
		{
			await table_model_init.callAsync([widget_table, layout]);
		}
		
		/* Set foreign key */
		var value_id = (int)model.data(["data", "item_pk", primary_key]);
		widget_form.proxy("data").commit("setForeignKey", foreign_key, value_id);
		widget_table.proxy("data").commit("setForeignKey", foreign_key, value_id);
		
		/* Remove foreign key */
		widget_form.proxy("fields").commit("removeFieldFromList", foreign_key);
		widget_table.proxy("fields").commit("removeFieldFromList", foreign_key);
	}
	
	
	/**
	 * Init foreign models
	 */
	async static void initForeignModels(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
	{
	}
	
	
	/**
	 * Load widget
	 */
	async static void loadWidget(ModelProxy model, ModelProxy layout)
	{
		await parent::loadWidget(model, layout);
		
		ModelProxy data = model.proxy("data");
		
		Dict item_pk = data.data("item_pk");
		if (item_pk == null)
		{
			data.commit("clearItem");
			await model.commitAsync("doLoadDictionary");
		}
		else
		{
			await model.commitAsync("doLoadItem");
		}
	}
	
	
	/**
	 * Widget event
	 */
	async static Dict event
	(
		ModelProxy<BaseModel> widget,
		string action, Dict obj, var tag = null
	)
	{
		return obj;
	}
	
	
	/**
	 * Load dictionary
	 */
	async static ApiResult doLoadDictionary(ModelProxy model)
	{
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		if (not data.call("isReady")) return;
		if (not model.data("can_dictionary_load")) return;
		
		/* Is dictionary exists */
		if (model.data(["fields", "dictionary_list"]).count() == 0) return;
		
		/* Setup loading */
		model.commit("setLoading", true);
		
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		ModelProxy fields = model.proxy("fields");
		
		/* Get post data */
		Dict search_data = model.data("search_data");
		Dict post_data = data.call("getItemPostData", search_data);
		
		/* Before event */
		Dict d = await static::callEvent(model, static::ON_LOAD_DICTIONARY_BEFORE, {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ApiResult res = await data.callAsync("callApiDictionary", d["post_data"]);
		
		/* Set api result */
		fields.commit("setApiResult", "dictionary", res);
		model.commit("setApiResult", "dictionary", res);
		
		/* Set loading */
		model.commit("setLoading", false);
		
		/* After event */
		await static::callEvent(model, static::ON_LOAD_DICTIONARY_AFTER, {
			"api": res,
			"post_data": d["post_data"],
		});
	}
	
	
	/**
	 * Load item
	 */
	async static ApiResult doLoadItem(ModelProxy model)
	{
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		if (not data.call("isReady")) return;
		
		/* Setup loading */
		model.commit("setLoading", true);
		
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		ModelProxy fields = model.proxy("fields");
		
		/* Get post data */
		Dict search_data = model.data("search_data");
		Dict post_data = data.call("getItemPostData", search_data);
		
		/* Before event */
		Dict d = await static::callEvent(model, static::ON_LOAD_ITEM_BEFORE, {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ModelProxy data = model.proxy("data");
		ApiResult res = await data.callAsync("callApiItem", d["post_data"]);
		
		/* Set api result */
		data.commit("setApiResult", "item", res);
		fields.commit("setApiResult", "item", res);
		model.commit("setApiResult", "item", res);
		
		/* Set loading */
		model.commit("setLoading", false);
		
		/* Clear message if success */
		if (res.isSuccess())
		{
			data.commit("clearErrorMessage");
		}
		
		/* After event */
		await static::callEvent(model, static::ON_LOAD_ITEM_AFTER, {
			"api": res,
			"post_data": d["post_data"],
		});
	}
	
	
	/**
	 * Save form
	 */
	async static ApiResult doSave(ModelProxy model)
	{
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		if (not data.call("isReady")) return;
		
		Dict item_pk = model.data("item_pk");
		Dict item = model.data("item");
		
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		
		/* Get post data */
		Dict search_data = model.data("search_data");
		Dict post_data = data.call("getSavePostData", search_data);
		
		/* Before event */
		Dict d = await static::callEvent(model, static::ON_SAVE_BEFORE, {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ModelProxy data = model.proxy("data");
		ApiResult res = await data.callAsync("callApiSave", d["post_data"]);
		
		/* Set api result */
		data.commit("setApiResult", "save", res);
		model.commit("setApiResult", "save", res);
		
		/* After event */
		await static::callEvent(model, static::ON_SAVE_AFTER, {
			"api": res,
			"post_data": d["post_data"],
		});
	}
	
	
	/**
	 * Delete item
	 */
	async static ApiResult doDelete(ModelProxy model)
	{
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		if (not data.call("isReady")) return;
		
		/* Get data storage */
		ModelProxy data = model.proxy("data");
		
		/* Get post data */
		Dict search_data = model.data("search_data");
		Dict post_data = data.call("getItemPostData", search_data);
		
		/* Before event */
		Dict d = await static::callEvent(model, static::ON_DELETE_BEFORE, {
			"post_data": post_data,
			"success": true,
		});
		
		if (not d["success"]) return;
		
		/* Send api */
		ModelProxy data = model.proxy("data");
		ApiResult res = await data.callAsync("callApiDelete", d["post_data"]);
		
		/* Set api result */
		data.commit("setApiResult", "delete", res);
		model.commit("setApiResult", "delete", res);
		
		/* After event */
		Dict d = await static::callEvent(model, static::ON_DELETE_AFTER, {
			"api": res,
			"post_data": d["post_data"],
		});
	}
}
