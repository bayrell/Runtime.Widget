<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.TextArea">

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.Events.ChangeEvent" />
<use name="Runtime.Web.RenderProvider" />
<use name="Runtime.Widget.Helper" />


<style>
.textarea{
	width: 100%;
	max-width: 100%;
	min-height: 400px;
	padding: 6px 12px;
	font-size: 1rem;
	background-color: ${ vars["button", "default", "background"] };
	border: 1px ${ vars["button", "default", "border"] } solid;
	outline: transparent;
}
</style>


<template>

	%set string value = Helper::getValue(layout, model_path, render_params);
	%set string name = (render_params != null) ? render_params.get("name", "") : "";
	%set string type = (render_params != null) ? render_params.get("type", "input") : "";
	%set primitive tag = (render_params != null) ? render_params.get("@tag", "") : "";
	
	%set Dict args = {};
	%if (render_params.get("readonly"))
	{
		%set args = args.setIm("readonly", 1);
	}
	
	<textarea class="textarea" @ref="textarea" @tag={ tag } @event:ChangeEvent="onChange"
		name={ name } type={ type } ...args>{{ value }}</textarea>
	
</template>


<script>

var textarea;


/**
 * Update elem params
 */
public void onUpdateElem()
{
	string value = Helper::getValue(this.layout(), this.model_path, this.params);
	this.textarea.elem.value = value;
}


/**
 * On change
 */
public void onChange(Message<ChangeEvent> msg)
{
	if (this.model_path != "")
	{
		RenderProvider provider = @.provider(classof RenderProvider);
		provider.commitComponent( this, msg.event.value );
	}
	
	ChangeEvent event = msg.event.clone({ "field_name": this.params["name"] });
	this.sendEvent(event);
}

</script>

</class>