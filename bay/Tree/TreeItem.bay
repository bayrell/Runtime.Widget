/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Tree;

use Runtime.BaseObject;
use Runtime.SerializeInterface;
use Runtime.Serializer;


class TreeItem extends BaseObject implements SerializeInterface
{
	string key = "";
	string label = "";
	bool can_drag_inside = true;
	var data = null;
	Vector<TreeItem> items = [];
	
	
	/**
	 * Constructor
	 */
	public void constructor(Dict params = null)
	{
		parent();
		this._assign_values(params);
	}
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "key", data);
		serializer.process(this, "label", data);
		serializer.process(this, "data", data);
	}
	
	
	/**
	 * Get item
	 */
	TreeItem getItem(Collection<int> path)
	{
		if (path.count() == 0) return this;
		
		int pos = path.first();
		TreeItem new_item = this.items.get(pos);
		if (new_item == null) return null;
		return new_item.getItem(path.slice(1));
	}
	
	
	/**
	 * Add item
	 */
	TreeItem addItem(TreeItem item, Collection<int> path = null, string kind = "before")
	{
		if (path == null or path.count() == 0)
		{
			if (kind == "into") this.items.prepend(item);
			else this.items.push(item);
			return item;
		}
		
		int pos = path.first();
		if (path.count() == 1 and (kind == "before" or kind == "after"))
		{
			if (kind == "before") this.items.insert(pos, item);
			else if (pos + 1 < this.items.count()) this.items.insert(pos + 1, item);
			else this.items.push(item);
			return;
		}
		
		TreeItem new_item = this.items.get(pos);
		if (new_item == null) return item;
		
		return new_item.addItem(item, path.slice(1), kind);
	}
	
	
	
	/**
	 * Remove item
	 */
	void removeItem(Collection<int> path)
	{
		if (path.count() == 0) return;
		
		int pos = path.first();
		if (path.count() == 1)
		{
			this.items.remove(pos);
			return;
		}
		
		TreeItem new_item = this.items.get(pos);
		if (new_item != null) new_item.removeItem(path.slice(1));
	}
}