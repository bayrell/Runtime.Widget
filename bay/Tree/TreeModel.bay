/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Tree;

use Runtime.BaseObject;
use Runtime.Reference;
use Runtime.Serializer;
use Runtime.Web.BaseModel;
use Runtime.Web.Events;
use Runtime.Widget.Tree.TreeItem;
use Runtime.Widget.Tree.TreeWidget;


class TreeModel extends BaseModel
{
	string component = classof TreeWidget;
	string widget_name = "tree";
	Events events = new Events;
	TreeItem selected_item = null;
	TreeItem root = new TreeItem{
		"key": "root",
		"label": "Root",
	};
	
	
	/**
	 * Setup widget params
	 */
	void setup(Dict params)
	{
		parent(params);
		
		if (params == null) return;
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
	}
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "root", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Select item
	 */
	void selectItem(TreeItem item)
	{
		this.selected_item = item;
	}
	
	
	/**
	 * Can drag & drop
	 */
	bool canDrag(Collection<string> src, Collection<string> dest, string kind)
	{
		Reference result = new Reference(true);
		this.events.emit("canDrag", [src, dest, kind, result]);
		return result.value();
	}
	
	
	/**
	 * Drag & Drop
	 */
	void dragElement(Collection<string> src, Collection<string> dest, string kind)
	{
		if (not this.canDrag(src, dest, kind)) return;
		
		/* Move item */
		TreeItem src_item = this.root.get(src);
		TreeItem dest_item = this.root.get(dest);
		if (not src_item) return;
		if (not dest_item) return;

		/* Get parent items */
		TreeItem src_parent_item = this.root.get(src.slice(0, -1));
		TreeItem dest_parent_item = (kind != "into")
			? this.root.get(dest.slice(0, -1))
			: this.root.get(dest)
		;
		
		/* Move item */
		src_parent_item.removeItem(src_item);
		if (kind == "into") dest_parent_item.addItem(src_item, null, "before");
		else dest_parent_item.addItem(src_item, dest_item, kind);
		
		/* Send drag & drop event */
		/*this.events.emit("drag", [src, dest, kind]);*/
	}
}
