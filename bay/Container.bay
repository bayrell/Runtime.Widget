<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.Container">

<use name="Runtime.Web.Annotations.Param" />


<style>
.widget_container--flex{
	display: flex;
}
</style>


<template>
	<div class="widget_container" class={{ this.getClass() }} style={{ this.getStyles() }}>
		%render this.renderSlot("default");
	</div>
</template>


<script>

@Param{
	"label": "Flex",
	"name": "Runtime.Widget.Select",
	"props": {
		"options": [
			{"label": "No", "value": "false"},
			{"label": "Yes", "value": "true"},
		],
	}
}
props string flex = "false";


@Param{
	"label": "Align items",
	"name": "Runtime.Widget.Select",
	"props": {
		"options": [
			{"label": "baseline", "value": "baseline"},
			{"label": "center", "value": "center"},
			{"label": "end", "value": "end"},
			{"label": "flex-end", "value": "flex-end"},
			{"label": "flex-start", "value": "flex-start"},
			{"label": "start", "value": "start"},
			{"label": "stretch", "value": "stretch"},
			{"label": "revert", "value": "revert"},
		],
	}
}
props string align_items = "";


@Param{
	"label": "Justify content",
	"name": "Runtime.Widget.Select",
	"props": {
		"options": [
			{"label": "left", "value": "left"},
			{"label": "center", "value": "center"},
			{"label": "right", "value": "right"},
			{"label": "space-around", "value": "space-around"},
			{"label": "space-between", "value": "space-between"},
			{"label": "start", "value": "start"},
			{"label": "stretch", "value": "stretch"},
			{"label": "end", "value": "end"},
		],
	}
}
props string justify_content = "";


@Param{
	"label": "Flex wrap",
	"name": "Runtime.Widget.Select",
	"props": {
		"options": [
			{"label": "nowrap", "value": "nowrap"},
			{"label": "wrap", "value": "wrap"},
		],
	}
}
props string flex_wrap = "";


/**
 * Returns class
 */
string getClass()
{
	Collection<string> styles = [];
	if (this.class) styles.push(this.class);
	if (this.flex == "true") styles.push("widget_container--flex");
	return rs::join(" ", styles);
}


/**
 * Returns styles
 */
string getStyles()
{
	Dict res = [];
	if (this.align_items) res.push("align-items: " ~ this.align_items);
	if (this.justify_content) res.push("justify-content: " ~ this.justify_content);
	if (this.flex_wrap) res.push("flex-wrap: " ~ this.flex_wrap);
	return rs::join(";", res);
}


/**
 * Returns default template
 */
static void getDefaultTemplate() => {
	"default": Dict () =>
	{
		"template": rs::join("\n", [
			"<style>",
			"padding-top: 10px;",
			"padding-bottom: 10px;",
			"padding-left: 0px;",
			"padding-right: 0px;",
			"</style>"
		])
	},
};

</script>

</class>