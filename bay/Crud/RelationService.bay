/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.Callback;
use Runtime.ORM.Connection;
use Runtime.ORM.Provider;
use Runtime.ORM.Query;
use Runtime.ORM.QueryField;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;
use Runtime.ORM.Annotations.BaseType;
use Runtime.Widget.Crud.CrudService;


class RelationService extends CrudService
{
	Connection connection = this.getConnection();
	Provider provider = @.provider(classof Provider);
	Relation item = null;
	
	
	/**
	 * Returns relation name
	 */
	string getRelationName() => "";
	
	
	/**
	 * Returns table name
	 */
	string getTableName()
	{
		string class_name = this.getRelationName();
		string table_name = new Callback(class_name, "getTableName").apply();
		return table_name;
	}
	
	
	/**
	 * Returns connection
	 */
	Connection getConnection() => Connection::get();
	
	
	/**
	 * Create search query
	 */
	Query createSearchQuery() => new Query()
		.select()
		.relation(this.getRelationName())
		.addField(new QueryField(this.getTableName(), "*"))
	;
	
	
	/**
	 * Build search query
	 */
	async void buildSearchQuery(Query q)
	{
	}
	
	
	/**
	 * New item
	 */
	async Dict newItem() => Relation::newInstance(this.getRelationName());
	
	
	/**
	 * Find item
	 */
	async Relation findItem(Dict pk)
	{
		if (pk == null) return null;
		string class_name = this.getRelationName();
		
		/* Create query */
		Query q = this.createSearchQuery().limit(1);
		
		/* Get primary key */
		Collection filter = this.provider.getPrimaryFilter(q._table_name, pk);
		q.setFilter(filter);
		
		/* Extend query */
		await this.buildSearchQuery(q);
		
		/* Find relation */
		Relation item = await this.connection.findRelation(q);
		return item;
	}
	
	
	/**
	 * Load items
	 */
	async void loadItems()
	{
		this.page = this.search_params.get("page", 0);
		this.limit = this.search_params.get("limit", 10);
		
		/* Create query */
		Query q = this.createSearchQuery();
		
		/* Set page */
		q.limit(this.limit).page(this.page);
		
		/* Set found_rows */
		q.calcFoundRows(true);
		bool found_rows = this.search_params.get("found_rows", true);
		if (q._calc_found_rows and not found_rows) q.calcFoundRows(false);
		
		/* Extend query */
		await this.buildSearchQuery(q);
		
		/* Get query result */
		Connection conn = Connection::get();
		this.items = await conn.fetchAll(q);
		
		/* Set pages */
		this.page = this.items.getPage();
		this.pages = this.items.getPages();
		this.limit = this.items.q._limit;
	}
	
	
	/**
	 * Returns primary key
	 */
	Dict getPrimaryKey(Relation item) => item.getPrimaryKey();
	
	
	/**
	 * Save item
	 */
	async void saveItem()
	{
		await this.item.save(this.connection);
		
		/* Refresh item */
		this.item = await this.findItem(this.getPrimaryKey(this.item));
	}
	
	
	/**
	 * Delete item
	 */
	async void deleteItem()
	{
		await this.item.delete(this.connection);
	}
}