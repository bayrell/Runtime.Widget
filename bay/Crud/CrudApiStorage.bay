/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.BaseObject;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.LayoutModel;
use Runtime.Widget.WidgetResultModel;


class CrudApiStorage extends BaseObject
{
	string api_name = "";
	
	Map post_data = {};
	Map item = {};
	Map item_pk = null;
	Map item_data = {};
	Vector item_fields = null;
	Vector save_fields = null;
	Vector search_fields = null;
	Vector items = null;
	int page = 1;
	int pages = 0;
	int limit = 10;
	
	string foreign_key = null;
	var foreign_value = null;
	Vector<string> primary_keys = [];
	
	LayoutModel layout = null;
	WidgetResultModel result = new WidgetResultModel;
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent();
		if (params)
		{
			if (params.has("class_name")) this.api_name = params.get("class_name") ~ "::crud";
			if (params.has("primary_keys")) this.primary_keys = params.get("primary_keys");
			if (params.has("layout")) this.layout = params.get("layout");
			if (params.has("item_pk")) this.item_pk = params.get("item_pk");
			if (params.has("item_data")) this.item_data = params.get("item_data");
			if (params.has("item_fields")) this.item_fields = params.get("item_fields");
			if (params.has("save_fields")) this.save_fields = params.get("save_fields");
			if (params.has("search_fields")) this.search_fields = params.get("search_fields");
			if (params.has("post_data")) this.post_data = params.get("post_data");
		}
	}
	
	
	/**
	 * Set api result
	 */
	void setApiResult(ApiResult res, string action = "")
	{
		if (res == null) return;
		if (res.data.has("item"))
		{
			this.setItem(res.data["item"]);
		}
		if (res.data.has("pk"))
		{
			this.setPrimaryKey(res.data["pk"]);
		}
		if (res.data.has("items"))
		{
			this.setItems(res.data["items"]);
		}
		if (res.data.has("limit"))
		{
			this.setLimit(res.data["limit"]);
		}
		if (res.data.has("page"))
		{
			this.setPage(res.data["page"]);
		}
		if (res.data.has("pages"))
		{
			this.setPages(res.data["pages"]);
		}
		this.result.setApiResult(res);
		
		if (action == "item" and this.result.isSuccess())
		{
			this.result.clear();
		}
	}
	
	
	/**
	 * Set items
	 */
	void setItems(Vector items)
	{
		this.items = items;
	}
	
	
	/**
	 * Returns items
	 */
	Vector getItems()
	{
		return this.items;
	}
	
	
	/**
	 * Set item
	 */
	void setItem(Map item)
	{
		this.item = item;
		this.updatePrimaryKey();
	}
	
	
	/**
	 * Returns item
	 */
	Map getItem()
	{
		return this.item;
	}
	
	
	/**
	 * Return item by row number
	 */
	Map getItemByRowNumber(int row_number) => this.getItems().get(row_number);
	
	
	/**
	 * Find index by primary key
	 */
	int findIndex(Map pk)
	{
		if (pk == null) return -1;
		
		Vector items = this.getItems();
		int index = items.find(
			bool (Dict item) use (pk)
			{
				Collection keys = pk.keys();
				for (int i=0; i<keys.count(); i++)
				{
					string key = keys.get(i);
					if (not item.has(key)) return false;
					if (item.get(key) != pk.get(key)) return false;
				}
				return true;
			}
		);
		return index;
	}
	
	
	/**
	 * Returns item value
	 */
	var getItemValue(string field_name) => this.getItem().get(field_name);
	
	
	/**
	 * Primary keys
	 */
	Vector<string> getPrimaryKeys() => this.primary_keys;
	
	
	/**
	 * Set primary keys
	 */
	Vector setPrimaryKeys(Vector<string> keys)
	{
		this.primary_keys = keys;
	}
	
	
	/**
	 * Returns primary key from item
	 */
	Map getItemPrimaryKey()
	{
		Vector keys = this.getPrimaryKeys();
		return this.getItem().intersect(keys);
	}
	
	
	/**
	 * Returns primary key
	 */
	Map getPrimaryKey()
	{
		return this.item_pk;
	}
	
	
	/**
	 * Set primary key
	 */
	void setPrimaryKey(Map pk)
	{
		this.item_pk = pk;
	}
	
	
	/**
	 * Update primary key from item
	 */
	void updatePrimaryKey()
	{
		Map pk = this.getItemPrimaryKey();
		this.setPrimaryKey(pk);
	}
	
	
	/**
	 * Set limit
	 */
	void setLimit(int limit)
	{
		this.limit = limit;
	}
	
	
	/**
	 * Set page
	 */
	void setPage(int page)
	{
		this.page = page;
	}
	
	
	/**
	 * Set pages
	 */
	void setPages(int pages)
	{
		this.pages = pages;
	}
	
	
	/**
	 * Clear
	 */
	void clear()
	{
		this.item = {};
		this.item_pk = null;
		this.result.clear();
	}
	
	
	/**
	 * Process frontend data
	 */
	void processFrontendData(Serializer serializer, Map data)
	{
		serializer.process(this, "item", data);
		serializer.process(this, "item_pk", data);
		serializer.process(this, "items", data);
		serializer.process(this, "page", data);
		serializer.process(this, "pages", data);
		serializer.process(this, "limit", data);
		serializer.process(this, "result", data);
	}
	
	
	/**
	 * Set post data
	 */
	void setPostData(string key, string value)
	{
		this.post_data.set(key, value);
	}
	
	
	/**
	 * Set foreign key
	 */
	void setForeignKey(string foreign_key, var foreign_value)
	{
		this.foreign_key = foreign_key;
		this.foreign_value = foreign_value;
	}
	
	
	/**
	 * Merge post data
	 */
	Map mergePostData(Map post_data, string action)
	{
		post_data = post_data.concat(this.post_data);
		
		/* Add foreign key */
		if (this.foreign_key != null)
		{
			post_data.set(this.foreign_key, this.foreign_value);
			if (post_data.has("item"))
			{
				post_data.get("item").set(this.foreign_key, this.foreign_value);
			}
		}
		
		/* Add item data */
		if (this.item_data and post_data.has("item"))
		{
			Map item = post_data.get("item");
			this.item_data.each(
				void (var value, string key) use (item)
				{
					item.set(key, value);
				}
			);
		}
		
		/* Set search fields */
		if (action == "search")
		{
			if (this.search_fields != null)
			{
				post_data.set("fields", this.search_fields);
			}
		}
		
		/* Set item fields */
		if (action == "item")
		{
			if (this.item_fields != null)
			{
				post_data.set("fields", this.item_fields);
			}
		}
		
		/* Intersect save fields */
		if (action == "save")
		{
			if (this.save_fields != null)
			{
				Dict item = post_data.get("item");
				item = item.intersect(this.save_fields);
				post_data.set("item", item);
			}
		}
		
		return post_data;
	}
	
	
	/**
	 * Load data from api
	 */
	async ApiResult doSearch(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"page": this.page,
			"limit": this.limit,
		});
		post_data = this.mergePostData(post_data, "search");
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method_name": "actionSearch",
			"data": post_data
		});
		this.setApiResult(res, "search");
		return res;
	}
	
	
	/**
	 * Load item from api
	 */
	async ApiResult doItem(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"pk": this.item_pk,
		});
		post_data = this.mergePostData(post_data, "item");
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method_name": "actionItem",
			"data": post_data
		});
		this.setApiResult(res, "item");
		return res;
	}
	
	
	/**
	 * Save data
	 */
	async ApiResult doSave(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"item": this.item,
			"pk": this.item_pk,
		});
		post_data = this.mergePostData(post_data, "save");
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method_name": "actionSave",
			"data": post_data
		});
		this.setApiResult(res, "save");
		return res;
	}
	
	
	/**
	 * Do delete
	 */
	async ApiResult doDelete(Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		post_data = post_data.concat({
			"pk": this.item_pk,
		});
		post_data = this.mergePostData(post_data, "delete");
		ApiResult res = await this.layout.callApi({
			"api_name": this.api_name,
			"method_name": "actionDelete",
			"data": post_data
		});
		this.setApiResult(res, "delete");
		return res;
	}
}