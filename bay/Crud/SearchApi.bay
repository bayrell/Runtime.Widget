/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.Exceptions.ApiError;
use Runtime.Exceptions.RuntimeException;
use Runtime.Web.BaseApi;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Widget.Crud.CrudFactory;
use Runtime.Widget.Crud.CrudService;


class SearchApi extends BaseApi
{
	/**
	 * Returns service
	 */
	CrudService createService() => null;
	
	
	/**
	 * Returns item fields
	 */
	Collection getItemFields() => [];
	
	
	/**
	 * Setup params
	 */
	void setup(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("crud")) this.crud = params.get("crud");
	}
	
	
	/**
	 * Build result
	 */
	async void buildResult(CrudService service)
	{
		if (not service.items) return;
		
		/* Convert item */
		Collection fields = this.getItemFields();
		Collection items = service.items.map(
			Dict (Dict item) use (service, fields) => service.convertItem(item, fields)
		);
		
		/* Setup result */
		this.result.data.set("items", items);
		this.result.data.set("page", service.page);
		this.result.data.set("pages", service.pages);
		this.result.data.set("limit", service.limit);
		
		/* Success */
		this.success();
	}
	
	
	/**
	 * Build item result
	 */
	async void buildItemResult(CrudService service)
	{
		if (not service.item) return;
		
		/* Convert item */
		Collection fields = this.getItemFields();
		Dict item = service.convertItem(service.item, fields);
		Dict pk = service.getPrimaryKey(service.item);
		
		/* Setup result */
		this.result.data.set("pk", pk);
		this.result.data.set("item", item);
		this.result.data.set("fields", service.rules.getFields());
		
		/* Success */
		this.success();
	}
	
	
	/**
	 * Action item
	 */
	@ApiMethod
	async void actionItem()
	{
		/* Create service */
		CrudService service = this.createService();
		if (not service)
		{
			throw new ApiError(new RuntimeException("Service not found"));
		}
		
		/* Load item */
		await service.searchItem(this.post_data.get("pk"));
		
		/* Build result */
		this.buildError(service);
		this.buildItemResult(service);
	}
	
	
	/**
	 * Action search
	 */
	@ApiMethod
	async void actionSearch()
	{
		/* Create service */
		CrudService service = this.createService();
		if (not service)
		{
			throw new ApiError(new RuntimeException("Service not found"));
		}
		
		/* Search items */
		await service.search(this.post_data);
		
		/* Build result */
		this.buildResult(service);
	}
}