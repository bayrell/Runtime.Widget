/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud.Api;

use Runtime.BaseObject;
use Runtime.Exceptions.ApiException;
use Runtime.Web.ApiResult;
use Runtime.Web.Bus;
use Runtime.Web.RenderContainer;
use Runtime.Widget.FieldInfo;


class FieldResult extends BaseObject
{
	Map<Vector<string>> fields = new Map;
	
	
	/**
	 * Returns true if is success
	 */
	bool isSuccess() => this.fields.keys().count() == 0;
	
	
	/**
	 * Add field error
	 */
	void addFieldError(string field_name, string error_message)
	{
		if (not this.fields.has(field_name))
		{
			this.fields.setValue(field_name, new Vector);
		}
		Vector messages = this.fields[field_name];
		messages.pushValue(error_message);
	}
	
	
	/**
	 * Returns api result
	 */
	Dict getResult()
	{
		ApiException e = new ApiException("Form error");
		return {
			"code": e.getErrorCode(),
			"message": e.getErrorMessage(),
			"error_name": e::getClassName(),
			"data": {
				"field_result": this.toDict(),
			},
		};
	}
	
	
	/**
	 * To dict
	 */
	Dict toDict() => this.fields
		.map(
			Collection (Vector item) => item.toCollection()
		)
		.toDict()
	;
	
}