/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud.Pages;

use Runtime.Serializer;
use Runtime.Entity.Factory;
use Runtime.Web.BasePageModel;
use Runtime.Web.ModelFactory;
use Runtime.Web.RenderContainer;
use Runtime.Widget.Crud.Pages.DialogPage;
use Runtime.Widget.Crud.CrudFactory;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.RowButtonsModel;


class DialogPageModel extends BasePageModel
{
	string component = classof DialogPage;
	CrudFactory crud = null;
	FormModel add_form = null;
	FormModel edit_form = null;
	FormModel delete_form = null;
	TableModel table = null;
	RowButtonsModel top_buttons = null;
	
	
	/**
	 * Init widget settings
	 */
	void initParams(Dict params)
	{
		parent(params);
		
		if (params == null) return;
		if (params.has("crud"))
		{
			this.crud = params.get("crud");
			if (this.crud instanceof Map)
			{
				Serializer serializer = new Serializer();
				serializer.setFlag(Serializer::ALLOW_OBJECTS);
				this.crud = serializer.decodeObject(this.crud);
			}
		}
	}
	
	
	/**
	 * Init widget settings
	 */
	void initWidget(Dict params)
	{
		parent(params);
		
		/* Add form */
		this.add_form = this.addWidget(
			this.crud.getParam("form.add.model.name"),
			{
				"widget_name": "form",
				"primary_key": this.crud.getPrimaryKey(),
				"storage": this.crud.getParam("form.add.storage", { "widget": this }),
				"fields": this.crud.getFormFields("add_form"),
			}
		);
		
		/* Edit form */
		this.edit_form = this.addWidget(
			this.crud.getParam("form.edit.model.name"),
			{
				"widget_name": "form",
				"primary_key": this.crud.getPrimaryKey(),
				"storage": this.crud.getParam("form.edit.storage", { "widget": this }),
				"fields": this.crud.getFormFields("edit_form"),
			}
		);
		
		/* Delete form */
		this.delete_form = this.addWidget(
			this.crud.getParam("form.delete.model.name"),
			{
				"widget_name": "delete_form",
				"primary_key": this.crud.getPrimaryKey(),
				"storage": this.crud.getParam("form.delete.storage", { "widget": this }),
			}
		);
		
		/* Add table */
		this.table = this.addWidget(
			this.crud.getParam("table.model.name"),
			{
				"widget_name": "table",
				"styles": ["border"],
				
				/* Table title */
				"get_title": void (Dict params)
				{
					return this.crud.getTableTitle(params);
				},
				
				/* Table storage */
				"storage": this.crud.getParam("table.storage", { "widget": this }),
				
				/* Form */
				"add_form": this.add_form,
				"edit_form": this.edit_form,
				"delete_form": this.delete_form,
				
				/* Table fields */
				"fields": this.crud.getTableFields("table"),
			}
		);
		
		/* Add top buttons */
		this.top_buttons = this.addWidget(
			classof RowButtonsModel,
			{
				"widget_name": "top_buttons",
				"styles": ["top_buttons"],
				"buttons":
				[
					new ModelFactory
					(
						"Runtime.Widget.Table.AddButtonModel",
						{
							"table": this.table,
						}
					)
				],
			}
		);
	}
	
	
	/**
	 * Process frontend data
	 */
	void serialize(Serializer serializer, Map data)
	{
		if (serializer.isEncode())
		{
			serializer.process(this, "crud", data);
		}
		parent(serializer, data);
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
		this.crud.buildTitle(container);
	}
}