/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Callback;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Widget.Crud.CrudDataStorage;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableModel;
use Runtime.Widget.FieldList;


struct CrudWidget extends BaseModel
{
	string action = "";
	bool show_table_top = true;
	
	
	/**
	 * Set action
	 */
	CrudWidget setAction(string action) => this.clone{
		"action": action,
	};
	
	
	/**
	 * Fields
	 */
	pure static Dict fields(string type) =>
	{
	};
	
	
	/**
	 * Primary keys
	 */
	pure static Collection primaryKeys() => [];
	
	
	/**
	 * Api name
	 */
	pure static Dict apiName(string type) => "";
	
	
	/**
	 * Factory table
	 */
	static TableModel createTableModel(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
		=> new TableModel{};
	
	
	/**
	 * Factory form
	 */
	static FormModel createFormModel(ModelProxy<BaseModel> model, ModelProxy<Layout> layout)
		=> new FormModel{};
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "index")
		{
			return "List of " ~ this.getPageTitle("names");
		}
		else if (action == "add")
		{
			return "Add " ~ this.getPageTitle("name");
		}
		else if (action == "edit")
		{
			return "Edit " ~
				this.getPageTitle("name") ~
				" '" ~ this.getPageTitle("item_name") ~ "'"
			;
		}
		else if (action == "delete")
		{
			return "Delete " ~
				this.getPageTitle("name") ~
				" '" ~ this.getPageTitle("item_name") ~ "'"
			;
		}
		else if (action == "delete_content")
		{
			return "Delete '" ~ this.getPageTitle("item_name") ~ "' ?";
		}
		else if (action == "save")
		{
			bool is_new = this.getWidget("form").data.isNew();
			if (is_new)
			{
				return this.getPageTitle("add");
			}
			return this.getPageTitle("edit");
		}
		else if (action == "name")
		{
			return "";
		}
		else if (action == "names")
		{
			return "";
		}
		else if (action == "item_name")
		{
			return "";
		}
		return "";
	}
	
	
	/**
	 * Init sub widgets
	 */
	static void initWidget(ModelProxy<CrudWidget> model, ModelProxy<Layout> layout)
	{
		await parent::initWidget(model, layout);
		
		/* Add widgets */
		string action = model.data("action");
		if (action == "index")
		{
			model.commit("addWidget", static::createTableModel(model, layout));
		}
		else if (action == "add" or action == "edit" or action == "delete")
		{
			model.commit("addWidget", static::createFormModel(model, layout));
		}
		else
		{
			model.commit("addWidget", static::createTableModel(model, layout));
			model.commit("addWidget", static::createFormModel(model, layout));
		}
		
		ModelProxy<FormModel> form = model.proxy(["widgets", "form"]);
		ModelProxy<TableModel> table = model.proxy(["widgets", "table"]);
		
		/* Setup table page */
		if (table.data() != null)
		{
			await static::initTableWidget(model, table, layout);
			
			/* Init table */
			await table.commitAsync("initWidget", layout);
		}
		
		/* Setup form page */
		if (form.data() != null)
		{
			await static::initFormWidget(model, form, layout);
			
			/* Init form */
			await form.commitAsync("initWidget", layout);
		}
	}
	
	
	/**
	 * Init table
	 */
	async static void initTableWidget(
		ModelProxy<CrudWidget> model,
		ModelProxy<TableModel> table,
		ModelProxy<Layout> layout
	)
	{
		/* Get storage */
		ModelProxy<CrudDataStorage> data = table.proxy("data");
		ModelProxy<FieldList> fields = table.proxy("fields");
		
		/* Api name */
		data.commit("setApiName", static::apiName("table"));
		
		/* Set fields */
		fields.commit("setFields", static::fields("table"));
		fields.commit("setPrimaryKeys", static::primaryKeys());
		
		Dict request_query = layout.data("request_query");
		table.proxy("data").commit("setPage", request_query.get(table.data("page_name"), 1));
		
		/* Add component */
		layout.commit("addComponent", table.data("component_name"));
	}
	
	
	/**
	 * Init form
	 */
	async static void initFormWidget(
		ModelProxy<CrudWidget> model,
		ModelProxy<FormModel> form,
		ModelProxy<Layout> layout
	)
	{
		string action = model.data("action");
		
		/* Set action */
		if (action == "add" or action == "edit" or action == "delete")
		{
			form.commit("setAction", action);
		}
		
		/* Get storage */
		ModelProxy<CrudDataStorage> data = form.proxy("data");
		ModelProxy<FieldList> fields = form.proxy("fields");
		
		/* Api name */
		data.commit("setApiName", static::apiName("form"));
		
		/* Set fields */
		fields.commit("setFields", static::fields("form"));
		fields.commit("setPrimaryKeys", static::primaryKeys());
		
		/* Set primary key */
		if (action != "add")
		{
			RouteInfo route = layout.data("route");
			Collection primary_keys = form.proxy("fields").data("primary_keys");
			
			Map keys = new Map();
			for (int i=0; i<primary_keys.count(); i++)
			{
				string field_name = primary_keys.get(i);
				keys.setValue(field_name, route.matches.get(field_name));
			}
			
			form.proxy("data").commit("setPrimaryKey", keys.toDict());
		}
		
		/* Setup back page */
		ModelProxy page_model = layout.proxy(layout.call("getPageModelPath"));
		page_model.commit("setBackPage", static::url(static::getRouteName("index")));
		
		/* Add component */
		layout.commit("addComponent", form.data("component_name"));
	}
	
	
}
