/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Layout;
use Runtime.Widget.Crud.CrudWidget;
use Runtime.Widget.Form.FormCrud;
use Runtime.Widget.Table.TableCrud;


struct CrudPageModel extends CrudWidget
{
	string back_page_url = "";
	
	
	/**
	 * Set back page url
	 */
	CrudPageModel setBackPage(string url) => this.clone{
		"back_page_url": url,
	};
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<BaseModel> model, BaseRoute route)
	{
		await parent::initWidget(model, route);
		
		ModelProxy form = model.proxy(["widgets", "form"]);
		ModelProxy table = model.proxy(["widgets", "table"]);
		
		if (table.data() != null)
		{
			await static::initWidgetTable(model, table, route);
		}
		
		if (form.data() != null)
		{
			await static::initWidgetForm(model, form, route);
		}
		
		await static::initComponents(model,  route);
	}
	
	
	/**
	 * Init components
	 */
	async static void initComponents(ModelProxy<BaseModel> model, BaseRoute route)
	{
	}
	
	
	/**
	 * Setup widget routes
	 */
	async static void initWidgetTable
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
	}
	
	
	/**
	 * Setup widget routes
	 */
	async static void initWidgetForm
	(
		ModelProxy<BaseModel> page_model,
		ModelProxy<BaseModel> widget,
		BaseRoute route
	)
	{
	}
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "index")
		{
			return "List of " ~ this.getPageTitle("names");
		}
		else if (action == "add")
		{
			return "Add " ~ this.getPageTitle("name");
		}
		else if (action == "edit")
		{
			return "Edit " ~
				this.getPageTitle("name") ~
				" '" ~ this.getPageTitle("item_name") ~ "'"
			;
		}
		else if (action == "delete")
		{
			return "Delete " ~
				this.getPageTitle("name") ~
				" '" ~ this.getPageTitle("item_name") ~ "'"
			;
		}
		else if (action == "delete_content")
		{
			return "Delete '" ~ this.getPageTitle("item_name") ~ "' ?";
		}
		else if (action == "save")
		{
			bool is_new = this.getWidget("form").isNew();
			if (is_new)
			{
				return this.getPageTitle("add");
			}
			return this.getPageTitle("edit");
		}
		else if (action == "name")
		{
			return static::getNames("name");
		}
		else if (action == "names")
		{
			return static::getNames("names");
		}
		else if (action == "item_name")
		{
			Dict item = this.getWidget("form").item;
			return static::getNames("item_name", {"item": item});
		}
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		return "";
	}
	
}
