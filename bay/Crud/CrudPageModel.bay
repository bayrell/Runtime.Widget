/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.ModelProxy;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.Callback;
use Runtime.Web.Layout;
use Runtime.Web.RouteInfo;
use Runtime.Widget.Form.FormModel;
use Runtime.Widget.Table.TableModel;


struct CrudPageModel extends BaseModel
{
	string action = "";
	string back_page_url = "";
	
	
	/**
	 * Factory
	 */
	static TableModel createTableModel() => new TableModel{};
	static FormModel createFormModel() => new FormModel{};
	
	
	/**
	 * Set action
	 */
	CrudPageModel setAction(string action) => this.clone{
		"action": action,
	};
	
	
	/**
	 * Set back page url
	 */
	CrudPageModel setBackPage(string url) => this.clone{
		"back_page_url": url,
	};
	
	
	/**
	 * Returns page title
	 */
	string getPageTitle(string action)
	{
		if (action == "index")
		{
			return "List of " ~ this.getPageTitle("names");
		}
		else if (action == "add")
		{
			return "Add " ~ this.getPageTitle("name");
		}
		else if (action == "edit")
		{
			return "Edit " ~
				this.getPageTitle("name") ~
				" '" ~ this.getPageTitle("item_name") ~ "'"
			;
		}
		else if (action == "delete")
		{
			return "Delete " ~
				this.getPageTitle("name") ~
				" '" ~ this.getPageTitle("item_name") ~ "'"
			;
		}
		else if (action == "delete_content")
		{
			return "Delete '" ~ this.getPageTitle("item_name") ~ "' ?";
		}
		else if (action == "save")
		{
			bool is_new = this.getWidget("form").data.isNew();
			if (is_new)
			{
				return this.getPageTitle("add");
			}
			return this.getPageTitle("edit");
		}
		else if (action == "name")
		{
			return static::getNames("name");
		}
		else if (action == "names")
		{
			return static::getNames("names");
		}
		else if (action == "item_name")
		{
			Dict item = this.getWidget("form").data.item;
			return static::getNames("item_name", {"item": item});
		}
		return "";
	}
	
	
	/**
	 * Get names
	 */
	static string getNames(string action, Dict obj = null)
	{
		return "";
	}
	
	
	/**
	 * Init widget
	 */
	async static void initWidget(ModelProxy<CrudPageModel> model, ModelProxy<Layout> layout)
	{
		/* Add widgets */
		string action = model.data("action");
		if (action == "index")
		{
			model.commit("addWidget", static::createTableModel());
		}
		else if (action == "save" or action == "delete")
		{
			model.commit("addWidget", static::createFormModel());
		}
		else
		{
			model.commit("addWidget", static::createTableModel());
			model.commit("addWidget", static::createFormModel());
		}
		
		await parent::initWidget(model, layout);
		
		RouteInfo route = layout.data("route");
		ModelProxy<FormModel> form = model.proxy(["widgets", "form"]);
		ModelProxy<TableModel> table = model.proxy(["widgets", "table"]);
		
		/* Setup table page */
		if (table.data() != null)
		{
			/* Init table */
			await table.commitAsync("initWidget", layout);
			
			Dict request_query = layout.data("request_query");
			table.proxy("data").commit("setPage", request_query.get(table.data("page_name"), 1));
			
			/* Add component */
			layout.commit("addComponent", table.data("component_name"));
		}
		
		/* Setup form page */
		if (form.data() != null)
		{
			/* Init form */
			await form.commitAsync("initWidget", layout);
			
			/* Set primary key */
			if (route.name != static::getRouteName("add"))
			{
				Collection primary_keys = form.proxy("fields").data("primary_keys");
				
				Map keys = new Map();
				for (int i=0; i<primary_keys.count(); i++)
				{
					string field_name = primary_keys.get(i);
					keys.setValue(field_name, route.matches.get(field_name));
				}
				
				form.proxy("data").commit("setPrimaryKey", keys.toDict());
			}
			
			/* Setup back page */
			ModelProxy page_model = layout.proxy(layout.call("getPageModelPath"));
			page_model.commit("setBackPage", static::url(static::getRouteName("index")));
			
			/* Init form */
			await form.commitAsync("initForeignModels", layout);
			
			/* Add component */
			layout.commit("addComponent", form.data("component_name"));
		}
	}
}
