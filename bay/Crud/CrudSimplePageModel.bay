/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.BaseModel;
use Runtime.Web.BaseRoute;
use Runtime.Web.RenderContainer;


class CrudSimplePageModel extends BaseModel
{
	static const string ACTION_CATALOG = "catalog";
	static const string ACTION_ITEM = "item";
	
	string action = "";
	Collection<Dict> items = null;
	Dict item = null;
	int page = 0;
	int pages = 0;
	int limit = 10;
	
	
	/**
	 * Returns api name
	 */
	pure string getApiName() => "";
	
	
	/**
	 * Set action
	 */
	void setAction(string action)
	{
		this.action = action;
	}
	
	
	/**
	 * Page not found model
	 */
	string getPageNotFoundModel() => "";
	
	
	/**
	 * Returns catalog fields
	 */
	Collection<string> getCatalogFields() => [];
	
	
	/**
	 * Returns item fields
	 */
	Collection<string> getItemFields() => this.getCatalogFields();
	
	
	/**
	 * Catalog filter
	 */
	void loadCatalogFilter(Map post_data){}
	
	
	/**
	 * Item filter
	 */
	void loadItemFilter(Map post_data){}
	
	
	/**
	 * Load catalog after
	 */
	async void loadCatalogAfter(RenderContainer container, ApiResult res)
	{
	}
	
	
	/**
	 * Load item after
	 */
	async void loadItemAfter(RenderContainer container, ApiResult res)
	{
	}
	
	
	/**
	 * Load catalog
	 */
	async void loadCatalog(RenderContainer container, Map post_data = null)
	{
		if (post_data == null) post_data = {};
		
		/* Add post data */
		if (not post_data.has("fields")) post_data.set("fields", this.getCatalogFields());
		if (not post_data.has("page")) post_data.set("page", this.page);
		if (not post_data.has("limit")) post_data.set("limit", this.limit);
		
		/* Add post data filter */
		this.loadCatalogFilter(post_data);
		
		/* Call api */
		ApiResult res = await this.layout.callApi({
			"api_name": static::getApiName(),
			"method_name": "actionSearch",
			"data": post_data
		});
		
		/* Set api result */
		if (res.isSuccess())
		{
			this.items = res.data.get("items");
			this.page = res.data.get("page");
			this.pages = res.data.get("pages");
		}
		
		await this.loadCatalogAfter(container, res);
	}
	
	
	/**
	 * Load item
	 */
	async void loadItem(RenderContainer container, Dict post_data = null)
	{
		if (post_data == null) post_data = {};
		
		/* Add post data */
		if (not post_data.has("fields")) post_data.set("fields", this.getItemFields());
		
		/* Add post data filter */
		this.loadItemFilter(post_data);
		
		/* Call api */
		ApiResult res = await this.layout.callApi({
			"api_name": static::getApiName(),
			"method_name": "actionSearchOne",
			"data": post_data
		});
		
		if (res.isSuccess())
		{
			this.item = res.data.get("items").get(0);
		}
		
		/* Page not found */
		if (this.item == null)
		{
			await container.callPageModel(this.getPageNotFoundModel());
			return;
		}
		
		await this.loadItemAfter(container, res);
	}
	
	
	/**
	 * Load data route
	 */
	async void loadDataRoute(RenderContainer container)
	{
		/* Load catalog */
		if (this.layout.route.label == static::ACTION_CATALOG)
		{
			this.setAction(static::ACTION_CATALOG);
			await this.loadCatalog(container);
		}
		
		/* Load item */
		else if (this.layout.route.label == static::ACTION_ITEM)
		{
			this.setAction(static::ACTION_ITEM);
			await this.loadItem(container);
		}
		
		else
		{
			/* Page not found */
			await container.callPageModel(this.getPageNotFoundModel());
			return;
		}
	}
	
	
	/**
	 * Load data
	 */
	async void loadData(RenderContainer container)
	{
		if (this.is_data_loaded) return;
		
		BaseRoute base_route = container.base_route;
		await this.loadDataRoute(container);
		
		if (base_route.isCancelRoute()) return;
		await parent(container);
	}
	
	
	/**
	 * Process frontend data
	 */
	void processFrontendData(Serializer serializer, Map data)
	{
		serializer.process(this, "action", data);
		serializer.process(this, "item", data);
		serializer.process(this, "items", data);
		serializer.process(this, "page", data);
		serializer.process(this, "pages", data);
		parent(serializer, data);
	}
	
	
	/**
	 * Build title
	 */
	void buildTitle(RenderContainer container)
	{
	}
	
	
	/**
	 * Route After
	 */
	async void onRouteAfter(RenderContainer container)
	{
		this.buildTitle(container);
		await parent(container);
	}
}