/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud.Rules;

use Runtime.re;
use Runtime.Widget.Crud.RulesManager;
use Runtime.Widget.Crud.Rules.BaseRule;


struct MatchRule extends BaseRule
{
	static const string ALPHA_NUMERIC = "^[0-9a-zA-Z]*$";
	static const string ALPHA_NUMERIC_DASH = "^[0-9a-zA-Z\_\-]*$";
	string name = "";
	string regular = "^$";
	string pattern = "";
	
	
	/**
	 * Validate item
	 */
	async bool validate(RulesManager rules, Dict data)
	{
		var value = data[this.name];
		if (value == "") return true;
		
		/* Match string */
		bool check = re::match(this.regular, value, this.pattern);
		if (not check)
		{
			rules.addFieldError(this.name, "The field contains invalid characters");
			return false;
		}
		
		return true;
	}
}
