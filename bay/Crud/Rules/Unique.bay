/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud.Rules;

use Runtime.re;
use Runtime.BaseStruct;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Connection;
use Runtime.ORM.Cursor;
use Runtime.ORM.Query;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.Relation;
use Runtime.Widget.Crud.CrudApi;
use Runtime.Widget.Crud.Rules.CrudRule;
use Runtime.Widget.Crud.Rules.FieldResult;


struct Unique extends CrudRule
{
	Collection<string> keys = null;
	
	
	/**
	 * Validate item
	 */
	async Dict validateItem(CrudApi api, Dict update_data)
	{
		return update_data;
	}
	
	
	/**
	 * Before save item
	 */
	async void onSaveBefore(CrudApi api)
	{
		Query q = new Query()
			.select(api::getTableName())
			.addRawField("count(1) as c")
		;
		
		if (this.keys)
		{
			for (int i=0; i<this.keys.count(); i++)
			{
				string field_name = this.keys.get(i);
				string value = api.item.get(field_name);
				q.where(field_name, "=", value);
			}
		}
		
		if (api.item != null and not api.item.isNew())
		{
			Collection filter = Relation::getPrimaryFilter(
				api::getTableName(), api.item.toMap(), true
			);
			for (int i=0; i<filter.count(); i++)
			{
				QueryFilter item = filter[i];
				item.op = "!=";
				q.addFilter(item);
			}
		}
		
		Connection connection = api.getConnection();
		FieldResult field_result = api.result.data.get("fields");
		Cursor cursor = await connection.executeQuery(q);
		int res = await cursor.fetchVar('c');
		if (res > 0)
		{
			for (int i=0; i<this.keys.count(); i++)
			{
				string name = this.keys.get(i);
				field_result.addFieldError(name, "Field must be unique");
			}
		}
	}
}
