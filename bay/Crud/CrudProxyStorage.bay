/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.Widget.Crud;

use Runtime.BaseObject;
use Runtime.Serializer;
use Runtime.Web.ApiResult;
use Runtime.Web.LayoutModel;
use Runtime.Widget.WidgetResultModel;
use Runtime.Widget.Crud.CrudApiStorage;


class CrudProxyStorage extends CrudApiStorage
{
	var container;
	Vector<string> path;
	
	
	/**
	 * Constructor
	 */
	void constructor(Dict params = null)
	{
		parent(params);
		if (params)
		{
			if (params.has("container")) this.container = params.get("container");
			if (params.has("path")) this.path = params.get("path");
		}
	}
	
	
	/**
	 * Process frontend data
	 */
	void processFrontendData(Serializer serializer, Map data)
	{
	}
	
	
	/**
	 * Returns items
	 */
	Vector getItems()
	{
		return rtl::attr(this.container, this.path);
	}
	
	
	/**
	 * Returns item
	 */
	Map getItem()
	{
		return this.item;
	}
	
	
	/**
	 * Load data from api
	 */
	async ApiResult doSearch(Dict post_data = null)
	{
		ApiResult res = new ApiResult();
		res.success({
			"data": {
			}
		});
		this.setApiResult(res, "search");
		return res;
	}
	
	
	/**
	 * Load item from api
	 */
	async ApiResult doItem(Dict post_data = null)
	{
		ApiResult res = new ApiResult();
		res.success({
			"data": {
			}
		});
		this.setApiResult(res, "item");
		return res;
	}
	
	
	/**
	 * Save data
	 */
	async ApiResult doSave(Dict post_data = null)
	{
		int index = this.findIndex(this.item_pk);
		if (index == -1)
		{
			Vector items = this.getItems();
			items.push(this.item);
		}
		else
		{
			Vector items = this.getItems();
			items.set(index, this.item);
		}
		
		ApiResult res = new ApiResult();
		res.success({
			"data": {
				"pk": this.getItemPrimaryKey(),
				"item": this.item.clone(),
			}
		});
		this.setApiResult(res, "save");
		
		return res;
	}
	
	
	/**
	 * Do delete
	 */
	async ApiResult doDelete(Dict post_data = null)
	{
		int index = this.findIndex(this.item_pk);
		if (index > -1)
		{
			Vector items = this.getItems();
			items.remove(index);
		}
		
		ApiResult res = new ApiResult();
		res.success({
			"data": {
				"pk": this.getItemPrimaryKey(),
			}
		});
		this.setApiResult(res, "delete");
		return res;
	}
}