<!--
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class name="Runtime.Widget.Blocks.Form">

<use name="Runtime.Web.ApiResult" />
<use name="Runtime.Web.Annotations.Param" />
<use name="Runtime.Widget.Button" component="true" />
<use name="Runtime.Widget.Input" component="true" />
<use name="Runtime.Widget.TextArea" component="true" />
<use name="Runtime.Widget.WidgetResult" component="true" />
<use name="Runtime.Widget.WidgetResultModel" />


<style>
.widget_form{
	max-width: 600px;
	margin-left: auto;
	margin-right: auto;
}
.widget_form__field{
	margin-bottom: 10px;
}
.widget_form__button{
	text-align: center;
}
.widget_form__field_error{
	color: var(--widget-color-danger);
	margin-top: var(--widget-space);
}
.widget_form__field_error--hide{
	display: none;
}
</style>


<template name="renderTitle">
	%if (this.title)
	{
		<div class="widget_form__title">{{ this.title }}</div>
	}
</template>


<template name="renderField" args="Dict field">
	%set string field_name = field.get("name");
	%set string field_label = field.get("label");
	%set string field_type = field.get("type");
	<div class="widget_form__field" data-name={{ field_name }} @key={{ field_name }}>
		%if (field_type == "input")
		{
			<Input
				name={{ field_name }}
				placeholder={{ field_label }}
				value={{ this.form_data.get(field_name) }}
				@event:valueChange={{
					void (string value) use (field_name)
					{
						this.form_data.set(field_name, value);
					}
				}}
			/>
		}
		%else if (field_type == "textarea")
		{
			<TextArea
				name={{ field_name }}
				placeholder={{ field_label }}
				value={{ this.form_data.get(field_name) }}
				@event:valueChange={{
					void (string value) use (field_name)
					{
						this.form_data.set(field_name, value);
					}
				}}
			/>
		}
		%set Collection<string> field_error = this.getFieldResult(field_name);
		%if (field_error.count() == 0)
		{
			<div class="widget_form__field_error widget_form__field_error--hide"
				data-name={{ field_name }} @key="result1"></div>
		}
		%else
		{
			<div class="widget_form__field_error" data-name={{ field_name }} @key="result2">
				%for (int i=0; i<field_error.count(); i++)
				{
					<div>{{ field_error.get(i) }}</div>
				}
			</div>
		}
	</div>
</template>


<template name="renderFields">
	<div class="widget_form__fields">
	%for (int i=0; i<this.fields.count(); i++)
	{
		%render this.renderField(this.fields.get(i));
	}
	</div>
</template>


<template name="renderButton">
	<div class="widget_form__button">
		<Button
			styles={{ this.button_styles }}
			@event:click={{ this.onSubmit }}
		>
			{{ this.button_text }}
		</Button>
	</div>
</template>


<template>
	<div class="widget_form" class={{ this.class }}>
		%render this.renderTitle();
		%render this.renderFields();
		%render this.renderButton();
		<WidgetResult @model={{ this.result }} />
	</div>
</template>


<script>

Dict form_data = {};
Dict fields_error = {};
WidgetResultModel result = new WidgetResultModel;


/**
 * Api name
 */
@Param{
	"label": "API name",
	"name": "Runtime.Widget.Input",
}
props string api_name = "";


/**
 * Api title
 */
@Param{
	"label": "API Title",
	"name": "Runtime.Widget.Input",
}
props string api_title = "";


/**
 * Form name
 */
@Param{
	"label": "Form name",
	"name": "Runtime.Widget.Input",
}
props string form_name = "";


/**
 * Title
 */
@Param{
	"label": "Title",
	"name": "Runtime.Widget.Input",
}
props string title = "Form title";


/**
 * Fields
 */
@Param{
	"label": "Fields",
	"name": "Runtime.Widget.Blocks.FormFields",
}
props Collection<Dict> fields = [
	{
		"name": "name",
		"label": "Username",
		"type": "input",
	},
];


/**
 * Button
 */
@Param{
	"label": "Button text",
	"name": "Runtime.Widget.Input",
}
props string button_text = "Push the button";


/**
 * Button styles
 */
@Param{
	"label": "Button text",
	"name": "Runtime.Widget.Tag",
}
props Collection<string> button_styles = [];


/**
 * Returns field result
 */
Collection getFieldResult(string field_name)
{
	if (this.fields_error.has(field_name)) return this.fields_error.get(field_name);
	return [];
}


/**
 * Clear error
 */
void clearError()
{
	this.result.clear();
	this.fields_error = {};
}


/**
 * On sumbit
 */
async void onSubmit()
{
	this.result.setWaitMessage();
	ApiResult res = await this.layout.callApi({
		"api_name": this.api_name,
		"method_name": "actionSave",
		"data":
		{
			"form_name": this.form_name,
			"item": this.form_data,
			"title": this.api_title,
		}
	});
	this.result.setApiResult(res);
	if (res.data.has("fields"))
	{
		this.fields_error = res.data.get("fields");
	}
	if (res.isSuccess())
	{
		this.emit("success", [res]);
	}
}


/**
 * Returns default template
 */
static void getDefaultTemplate() => {
	"default": Dict () =>
	{
		"template": rs::join("\n", [
			"<style>",
			"%(Form)widget_form{",
			"  &__title{",
			"    text-align: center;",
			"    padding-bottom: 10px;",
			"    font-size: 22px;",
			"  }",
			"  &__field{",
			"    %(Input)widget_input, %(TextArea)widget_textarea{",
			"      padding: 10px;",
			"      font-size: 16px;",
			"      border-radius: 5px;",
			"    }",
			"    %(TextArea)widget_textarea{",
			"      min-height: 150px;",
			"    }",
			"  }",
			"  &__button{",
			"    %(Button)widget_button{",
			"      width: 100%;",
			"    }",
			"  }",
			"}",
			"</style>"
		])
	},
};

</script>


</class>